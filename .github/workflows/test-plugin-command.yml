name: Plugin 'Test' Command

on:
  workflow_dispatch:
    inputs:
      # These first two inputs are required in order for the slash command to function
      repository:
        description: The repository from which the slash command was dispatched
        required: true
      comment-id:
        description: The comment ID of the originating slash command
        required: false
      issue-number:
        description: The issue number containing the slash command comment
        required: true
      from-slash-command:
        description: Whether this workflow run was invoked by a slash command
        required: true
        default: 'false'
      name:
        description: The name of the plugin's executable
        required: true
      plugin-type:
        description: The type of plugin to test
        required: true
      plugin-path:
        description: The path to the plugin definition file
        required: true
      git-ref:
        description: The git ref to use for the plugin checkout
        required: true
      prepend-text:
        description: Text to be prepended to the command output
        required: false
        default: ''

jobs:
  plugin_tests:

    runs-on: ubuntu-latest
    permissions:
      contents: write       # to create a github release
      pull-requests: write  # to create and update PRs

    steps:
    - name: Add 👀 reaction
      if: github.event.inputs.from-slash-command == 'true'
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
      with:
        token: ${{ secrets.MELTYBOT_GITHUB_AUTH_TOKEN }}
        repository: ${{ github.event.inputs.repository }}
        comment-id: ${{ github.event.inputs.comment-id }}
        reactions: eyes

    - name: Set initial edit mode (to conditionally clear previous comment)
      id: initial-edit-mode
      run: |
        should_replace=${{ github.event.inputs.from-slash-command == 'false' && github.event.inputs.comment-id != '' }}
        echo "edit-mode=$([ ${should_replace} == 'true' ] && echo 'replace' || echo 'append')" >> $GITHUB_OUTPUT

    - name: Append 'starting' notification to comment
      id: create-or-update-comment
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
      with:
        edit-mode: ${{ steps.initial-edit-mode.outputs.edit-mode }}
        comment-id: ${{ github.event.inputs.comment-id }}
        issue-number: ${{ github.event.inputs.issue-number }}
        body: |
          ${{ github.event.inputs.prepend-text }}
          > [Starting test job...](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
          > ...

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: "3.10"

    - name: Install uv
      uses: astral-sh/setup-uv@445689ea25e0de0a23313031f5fe577c74ae45a1 # v6.3.0
      with:
        version: ">=0.4.30"

    - name: Install Meltano
      run: |
        uv tool install meltano
        meltano init --no-usage-stats ${{ github.workspace }}/project

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: ${{ github.event.inputs.repository }}
        path: plugin
        ref: ${{ github.event.inputs.git-ref }}
        sparse-checkout: |
          ${{ github.event.inputs.plugin-path }}

    - name: Add and install plugin
      id: plugin-install
      working-directory: ${{ github.workspace }}/project
      run: |
        echo "Working directory: $PWD"
        meltano add ${{ github.event.inputs.plugin-type }} ${{ github.event.inputs.name }} --from-ref ${{ github.workspace }}/plugin/${{ github.event.inputs.plugin-path }} 2>&1 | tee install-output.txt
        echo "failed=${PIPESTATUS[0]}" >> $GITHUB_ENV

    - name: Create installation failure log
      if: steps.plugin-install.outputs.failed == '1'
      run: |
        echo "JOB_OUTPUT<<EOF" >> $GITHUB_ENV
        echo "melty-bot % meltano add ${{ github.event.inputs.plugin-type }} ${{ github.event.inputs.name }} --from-ref ${{ github.event.inputs.plugin-path }}" >> $GITHUB_ENV
        cat install-output.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Abort if installation failed
      if: steps.plugin-install.outputs.failed == '1'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
            core.setFailed('Plugin installation failed')

    - name: Print plugin help
      id: plugin-help
      working-directory: ${{ github.workspace }}/project
      run: |
        meltano invoke ${{ github.event.inputs.name }} --help | tee help-output.txt

    - name: Print plugin version
      id: plugin-version
      continue-on-error: true
      working-directory: ${{ github.workspace }}/project
      run: |
        meltano invoke ${{ github.event.inputs.name }} --version | tee version-output.txt

    - name: Print plugin about
      id: plugin-about
      continue-on-error: true
      working-directory: ${{ github.workspace }}/project
      run: |
        meltano invoke ${{ github.event.inputs.name }} --about --format=json | tee about-result.json

    - name: Print plugin markdown
      id: plugin-markdown
      continue-on-error: true
      working-directory: ${{ github.workspace }}/project
      run: |
        meltano invoke ${{ github.event.inputs.name }} --about --format=markdown | tee markdown-result.md

    - name: Print discovery output
      id: plugin-catalog
      continue-on-error: true
      working-directory: ${{ github.workspace }}/project
      run: |
        meltano invoke ${{ github.event.inputs.name }} --discover | tee catalog.json

    # Generates the JOB_OUTPUT env var, accessible via '${{ env.JOB_OUTPUT }}''
    # Ref: https://trstringer.com/github-actions-multiline-strings/
    - name: Process job output
      working-directory: ${{ github.workspace }}/project
      if: steps.plugin-install.outputs.failed == '0'
      run: |
        echo "JOB_OUTPUT<<EOF" >> $GITHUB_ENV
        if [ -s markdown-result.md ]; then
          echo -e "<details><summary>Auto-generated README.md</summary>\n" >> $GITHUB_ENV
          cat markdown-result.md >> $GITHUB_ENV
          echo -e "\n</details>" >> $GITHUB_ENV
        fi
        if [ -s version-output.txt ]; then
          echo "<details><summary>Version info</summary>" >> $GITHUB_ENV
          echo -e "\n\`\`\`" >> $GITHUB_ENV
          cat version-output.txt >> $GITHUB_ENV
          echo -e "\`\`\`\n" >> $GITHUB_ENV
          echo "</details>" >> $GITHUB_ENV
        fi
        echo "<details><summary>Usage info</summary>" >> $GITHUB_ENV
        echo -e "\n\`\`\`" >> $GITHUB_ENV
        echo "melty-bot % meltano invoke ${{ github.event.inputs.name }} --help" >> $GITHUB_ENV
        cat help-output.txt >> $GITHUB_ENV
        echo -e "\`\`\`\n" >> $GITHUB_ENV
        echo "</details>" >> $GITHUB_ENV
        echo "<details><summary>Detected capabilities</summary>" >> $GITHUB_ENV
        echo -e "\n" >> $GITHUB_ENV
        if grep -q -e "--discover" help-output.txt; then
          echo "> - ✅ 'discover'" >> $GITHUB_ENV
        else
          echo "> - ❌ 'discover'" >> $GITHUB_ENV
        fi
        if grep -q -e "--catalog" help-output.txt; then
          echo "> - ✅ 'catalog'" >> $GITHUB_ENV
        elif grep -q -e "--properties" help-output.txt; then
          echo "> - ❌ 'catalog'" >> $GITHUB_ENV
          echo "> - ✅ 'properties'" >> $GITHUB_ENV
        else
          echo "> - ❌ 'catalog'" >> $GITHUB_ENV
          echo "> - ❌ 'properties'" >> $GITHUB_ENV
        fi
        if grep -q -e "--state" help-output.txt; then
          echo "> - ✅ 'state'" >> $GITHUB_ENV
        else
          echo "> - ❌ 'state'" >> $GITHUB_ENV
        fi
        if grep -q -e "--about" help-output.txt; then
          echo "> - ✅ 'about'" >> $GITHUB_ENV
        else
          echo "> - ❌ 'about'" >> $GITHUB_ENV
        fi
        echo -e "\n</details>\n" >> $GITHUB_ENV
        if [ -s about-result.json ]; then
          echo "<details><summary>JSON Metadata</summary>" >> $GITHUB_ENV
          echo -e "\n\`\`\`json" >> $GITHUB_ENV
          cat about-result.json >> $GITHUB_ENV
          echo -e "\`\`\`\n" >> $GITHUB_ENV
          echo "</details>" >> $GITHUB_ENV
        fi
        if [ -s catalog.json ]; then
          echo "<details><summary>Discovered streams</summary>" >> $GITHUB_ENV
          echo -e "\n" >> $GITHUB_ENV
          cat catalog.json | jq --raw-output '.streams[] | (.tap_stream_id // .stream ) | "- `\(.)`"' >> $GITHUB_ENV
          echo -e "\n" >> $GITHUB_ENV
          echo "</details>" >> $GITHUB_ENV
        fi
        echo "EOF" >> $GITHUB_ENV

    - name: Append summary output
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
      if: always()
      with:
        comment-id: ${{ steps.create-or-update-comment.outputs.comment-id }}
        body: |
          > Job completed.

          ${{ env.JOB_OUTPUT }}

    - name: Add reaction (success)
      if: github.event.inputs.from-slash-command == 'true'
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
      with:
        token: ${{ secrets.MELTYBOT_GITHUB_AUTH_TOKEN }}
        repository: ${{ github.event.inputs.repository }}
        comment-id: ${{ github.event.inputs.comment-id }}
        reactions: hooray

    - name: Add reaction (failure)
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
      if: failure() && (github.event.inputs.from-slash-command == 'true')
      with:
        token: ${{ secrets.MELTYBOT_GITHUB_AUTH_TOKEN }}
        repository: ${{ github.event.inputs.repository }}
        comment-id: ${{ github.event.inputs.comment-id }}
        reactions: confused
