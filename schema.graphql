"""
Add fields from field values.
"""
directive @infer on OBJECT

"""
Add reference resolver.
"""
directive @reference(
  """
  Reference node by a custom field value.
  """
  by: String = "id"
) on FIELD_DEFINITION

"""
Return value from another field.
"""
directive @proxy(from: String) on FIELD_DEFINITION

"""
Paginate a connection in a query. Only supported in page-query.
"""
directive @paginate on FIELD

input BelongsToFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
  typeName: TypeNameQueryOperatorInput
}

scalar Date

type Extractors implements Node {
  id: ID!
  path(to: String = "default"): String
  belongsTo(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument!]
    filter: BelongsToFilterInput
  ): NodeBelongsTo
}

type ExtractorsConnection implements NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ExtractorsEdge]
}

type ExtractorsEdge implements NodeConnectionEdge {
  node: Extractors
  next: Extractors
  previous: Extractors
}

input ExtractorsFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
}

scalar File

type Files implements Node {
  id: ID!
  path(to: String = "default"): String
  belongsTo(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument!]
    filter: BelongsToFilterInput
  ): NodeBelongsTo
}

type FilesConnection implements NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [FilesEdge]
}

type FilesEdge implements NodeConnectionEdge {
  node: Files
  next: Files
  previous: Files
}

input FilesFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
}

input IDQueryOperatorInput {
  """
  Filter by property of (strict) equality.
  """
  eq: ID

  """
  Filter by property not equal to provided value.
  """
  ne: ID

  """
  Filter by property matching any of the provided values.
  """
  in: [ID]

  """
  Filter by property not matching any of the provided values.
  """
  nin: [ID]

  """
  Filter nodes that contain the field, including nodes where the field value is null.
  """
  exists: Boolean
}

scalar Image

enum ImageFit {
  """
  Crop to cover both provided dimensions.
  """
  cover

  """
  Embed within both provided dimensions.
  """
  contain

  """
  Ignore the aspect ratio of the input and stretch to both provided dimensions.
  """
  fill

  """
  Preserving aspect ratio, resize the image to be as large as possible while
  ensuring its dimensions are less than or equal to both those specified.
  """
  inside

  """
  Preserving aspect ratio, resize the image to be as small as possible while
  ensuring its dimensions are greater than or equal to both those specified.
  Some of these values are based on the object-fit CSS property.
  """
  outside
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONQueryOperatorInput {
  """
  Filter by property of (strict) equality.
  """
  eq: JSON

  """
  Filter by property not equal to provided value.
  """
  ne: JSON

  """
  Filter by property matching any of the provided values.
  """
  in: [JSON]

  """
  Filter by property not matching any of the provided values.
  """
  nin: [JSON]

  """
  Filter nodes that contain the field, including nodes where the field value is null.
  """
  exists: Boolean

  """
  Filter by property matching provided regular expression.
  """
  regex: String
}

type Loaders implements Node {
  id: ID!
  path(to: String = "default"): String
  belongsTo(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument!]
    filter: BelongsToFilterInput
  ): NodeBelongsTo
}

type LoadersConnection implements NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [LoadersEdge]
}

type LoadersEdge implements NodeConnectionEdge {
  node: Loaders
  next: Loaders
  previous: Loaders
}

input LoadersFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
}

type Metadata {
  siteName: String
  siteDescription: String
  siteUrl: String
  pathPrefix: String
}

interface Node {
  id: ID!
}

type NodeBelongsTo implements NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NodeBelongsToEdge]
}

type NodeBelongsToEdge implements NodeConnectionEdge {
  node: Node
  next: Node
  previous: Node
}

interface NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NodeConnectionEdge]
}

interface NodeConnectionEdge {
  node: Node
  next: Node
  previous: Node
}

type Orchestrators implements Node {
  id: ID!
  path(to: String = "default"): String
  belongsTo(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument!]
    filter: BelongsToFilterInput
  ): NodeBelongsTo
}

type OrchestratorsConnection implements NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [OrchestratorsEdge]
}

type OrchestratorsEdge implements NodeConnectionEdge {
  node: Orchestrators
  next: Orchestrators
  previous: Orchestrators
}

input OrchestratorsFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
}

type Page {
  path: String!
  context: JSON!
}

input PageFilterInput {
  path: StringQueryOperatorInput
  context: JSONQueryOperatorInput
}

type PageInfo {
  perPage: Int!
  currentPage: Int!
  totalPages: Int!
  totalItems: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  isFirst: Boolean!
  isLast: Boolean!
}

type Query {
  extractors(
    id: ID
    path: String

    """
    Will return an error if not nullable.
    """
    nullable: Boolean = false
  ): Extractors
  allExtractors(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]

    """
    Filter for Extractors nodes.
    """
    filter: ExtractorsFilterInput
  ): ExtractorsConnection
  loaders(
    id: ID
    path: String

    """
    Will return an error if not nullable.
    """
    nullable: Boolean = false
  ): Loaders
  allLoaders(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]

    """
    Filter for Loaders nodes.
    """
    filter: LoadersFilterInput
  ): LoadersConnection
  files(
    id: ID
    path: String

    """
    Will return an error if not nullable.
    """
    nullable: Boolean = false
  ): Files
  allFiles(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]

    """
    Filter for Files nodes.
    """
    filter: FilesFilterInput
  ): FilesConnection
  orchestrators(
    id: ID
    path: String

    """
    Will return an error if not nullable.
    """
    nullable: Boolean = false
  ): Orchestrators
  allOrchestrators(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]

    """
    Filter for Orchestrators nodes.
    """
    filter: OrchestratorsFilterInput
  ): OrchestratorsConnection
  transformers(
    id: ID
    path: String

    """
    Will return an error if not nullable.
    """
    nullable: Boolean = false
  ): Transformers
  allTransformers(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]

    """
    Filter for Transformers nodes.
    """
    filter: TransformersFilterInput
  ): TransformersConnection
  utilities(
    id: ID
    path: String

    """
    Will return an error if not nullable.
    """
    nullable: Boolean = false
  ): Utilities
  allUtilities(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]

    """
    Filter for Utilities nodes.
    """
    filter: UtilitiesFilterInput
  ): UtilitiesConnection
  metadata: Metadata
  metaData: Metadata @deprecated(reason: "Use Query.metadata instead.")
  page(path: String!): Page
  allPage(
    """
    Filter pages.
    """
    filter: PageFilterInput
  ): [Page]
}

input SortArgument {
  by: String! = "date"
  order: SortOrder = DESC
}

enum SortOrder {
  """
  Sort ascending
  """
  ASC

  """
  Sort descending
  """
  DESC
}

input StringQueryOperatorInput {
  """
  Filter by property of (strict) equality.
  """
  eq: String

  """
  Filter by property not equal to provided value.
  """
  ne: String

  """
  Filter by property matching any of the provided values.
  """
  in: [String]

  """
  Filter by property not matching any of the provided values.
  """
  nin: [String]

  """
  Filter nodes that contain the field, including nodes where the field value is null.
  """
  exists: Boolean

  """
  Filter by property matching provided regular expression.
  """
  regex: String
}

type Transformers implements Node {
  id: ID!
  path(to: String = "default"): String
  belongsTo(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument!]
    filter: BelongsToFilterInput
  ): NodeBelongsTo
}

type TransformersConnection implements NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TransformersEdge]
}

type TransformersEdge implements NodeConnectionEdge {
  node: Transformers
  next: Transformers
  previous: Transformers
}

input TransformersFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
}

enum TypeName {
  Extractors
  Loaders
  Files
  Orchestrators
  Transformers
  Utilities
}

input TypeNameQueryOperatorInput {
  """
  Filter by property of (strict) equality.
  """
  eq: TypeName

  """
  Filter by property not equal to provided value.
  """
  ne: TypeName

  """
  Filter by property matching any of the provided values.
  """
  in: [TypeName]

  """
  Filter by property not matching any of the provided values.
  """
  nin: [TypeName]

  """
  Filter nodes that contain the field, including nodes where the field value is null.
  """
  exists: Boolean
}

type Utilities implements Node {
  id: ID!
  path(to: String = "default"): String
  belongsTo(
    sortBy: String = "date"
    order: SortOrder = DESC

    """
    Defaults to 25 when page is provided.
    """
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument!]
    filter: BelongsToFilterInput
  ): NodeBelongsTo
}

type UtilitiesConnection implements NodeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UtilitiesEdge]
}

type UtilitiesEdge implements NodeConnectionEdge {
  node: Utilities
  next: Utilities
  previous: Utilities
}

input UtilitiesFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
}
