variables:
  JEKYLL_ENV: production
  LC_ALL: C.UTF-8

stages:
  - validate
  - discovery
  - test
  - deploy

##########################
# Jekyll Build
##########################

.jekyll_template: &jekyll_template
  image: ruby:2.7
  before_script:
    - bundle install

jekyll_test:
  <<: *jekyll_template
  stage: test
  needs:
    - job: discovery_validation
      artifacts: true
  script:
    - bundle exec jekyll build -d test
  artifacts:
    paths:
    - test
  except:
  - main
  - schedule

pages:
  <<: *jekyll_template
  stage: deploy
  needs:
    - job: discovery_validation
      artifacts: true
  script:
    - bundle exec jekyll build -d public
  artifacts:
    paths:
    - public
  only:
  - main
  except:
  - schedule

##########################
# Daily data pipeline
##########################

data-pipeline-test:
  image: python:3.8
  stage: test
  needs: []
  variables:
    JOB_ID: ATHENA-CI-TEST
    TARGET_ATHENA_S3_BUCKET: prod-meltano-bucket-01
    DBT_TARGET: athena
    STAGE: test
    TAP_REF: tap-github-test
    TARGET_REF: target-athena-test
    RAW_SCHEMA_NAME_DEV: prod01_dev
  before_script:
  - apt-get update && apt-get install -y jq
  script:
  - cd meltano/
  - pip3 install meltano
  - meltano install
  - echo "Installing creds file from CI..." && cp $MELTANO_ENV_FILE .env
  - meltano elt $TAP_REF $TARGET_REF --job_id=$JOB_ID
  - |
    echo "Logging current state...\n" && \
    meltano elt $TAP_REF $TARGET_REF --job_id=$JOB_ID --dump=state |  jq '.'     
  except:
  - schedule

repos-daily:
  image: python:3.8
  stage: deploy
  needs: []
  variables:
    JOB_ID: GITHUB-REPOS-PROD
    TARGET_ATHENA_S3_BUCKET: prod-meltano-bucket-01
    DBT_TARGET: athena
    STAGE: prod
    TAP_REF: tap-github-repos
    TARGET_REF: target-athena
    RAW_SCHEMA_NAME_PROD: prod01_raw
  before_script:
  - apt-get update && apt-get install -y jq
  script:
  - cd meltano/
  - pip3 install meltano
  - meltano install
  - echo "Installing creds file from CI..." && cp $MELTANO_ENV_FILE .env
  - meltano elt $TAP_REF $TARGET_REF --job_id=$JOB_ID
  - |
    echo "Logging current state...\n" && \
    meltano elt $TAP_REF $TARGET_REF --job_id=$JOB_ID --dump=state |  jq '.'     
  only:
  - schedule

metrics-daily:
  image: python:3.8
  stage: deploy
  needs: [repos-daily]  # Sequenced to avoid rate limit
  variables:
    JOB_ID: GITHUB-METRICS-PROD
    TARGET_ATHENA_S3_BUCKET: prod-meltano-bucket-01
    DBT_TARGET: athena-prod
    STAGE: prod
    TAP_REF: tap-github-metrics
    TARGET_REF: target-athena
    RAW_SCHEMA_NAME_PROD: prod01_raw
  before_script:
  - apt-get update && apt-get install -y jq
  script:
  - cd meltano/
  - pip3 install meltano
  - meltano install
  - echo "Installing creds file from CI..." && cp $MELTANO_ENV_FILE .env
  - meltano elt $TAP_REF $TARGET_REF --job_id=$JOB_ID
  - |
    echo "Logging current state...\n" && \
    meltano elt $TAP_REF $TARGET_REF --job_id=$JOB_ID --dump=state |  jq '.'     
  only:
  - schedule

transforms-daily:
  image: python:3.8
  stage: deploy
  needs: [repos-daily, metrics-daily]
  variables:
    JOB_ID: GITHUB-REPOS-PROD
    TARGET_ATHENA_S3_BUCKET: prod-meltano-bucket-01
    DBT_TARGET: athena
    STAGE: prod
    RAW_SCHEMA_NAME_PROD: prod01_raw
  before_script:
  - apt-get update && apt-get install -y jq
  script:
  - cd meltano/
  - pip3 install meltano
  - meltano install
  - echo "Installing creds file from CI..." && cp $MELTANO_ENV_FILE .env
  - meltano invoke dbt run
  only:
  - schedule

##########################
# discovery.yml Validation
##########################

discovery_validation:
  image: python:3
  before_script:
    - pip install ruamel.yaml
    - pip install deepdiff
  stage: discovery
  script:
    - curl https://meltano.com/discovery.yml --output meltano.yml
    - python discovery_yaml_generator.py
    - python yaml_diff.py
  artifacts:
    paths:
      - discovery.yml

##########################
# Validate taps and targets
##########################

jsonschema_validation:
  image: python:3
  before_script:
    - pip install ruamel.yaml
    - pip install jsonschema
  stage: validate
  script:
    - python yaml_validate.py
  except:
  - schedule
