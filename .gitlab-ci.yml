variables:
  JEKYLL_ENV: production
  LC_ALL: C.UTF-8

stages:
  - validate
  - test
  - deploy

##########################
# Jekyll Build
##########################

.jekyll_template: &jekyll_template
  image: ruby:2.7
  before_script:
    - bundle install

jekyll_test:
  <<: *jekyll_template
  stage: test
  script:
    - bundle exec jekyll build -d test
  artifacts:
    paths:
    - test
  only: 
    refs:
      - merge_requests

pages:
  <<: *jekyll_template
  stage: deploy
  script:
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - aws s3 cp s3://prod-meltano-bucket-01/hub_metrics/metrics.yml ./_data/metrics.yml
    - aws s3 cp s3://prod-meltano-bucket-01/hub_metrics/audit.yml ./_data/audit.yml
    - apt-get update && apt-get install -y pip
    - pip install PyYAML && pip install requests
    - python3 discovery_splitter.py
    - bundle exec jekyll build -d public
    - cp _redirects ./public
  artifacts:
    paths:
    - public
  rules:
  - if: $CI_COMMIT_BRANCH == "main"
    when: always
  # scheduled and a custom env var is set in the schedule
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "daily_build"
    when: always
  - when: never

##########################
# Validate taps and targets
##########################

jsonschema_validation:
  image: python:3
  before_script:
    - pip install ruamel.yaml
    - pip install jsonschema
  stage: validate
  script:
    - python yaml_validate.py
  only: 
    refs:
      - merge_requests
  except:
    - schedule

##########################
# Validate API schema
##########################

api_schema_test:
  image: python:3
  before_script:
    - pip install ruamel.yaml
    - pip install jsonschema
  stage: test
  script:
    - python api_schema_validate.py "test/meltano/api/v1/plugins"
  needs: [jekyll_test]
  only: 
    refs:
      - merge_requests
  except:
    - schedule
