name: superset
namespace: superset
label: Superset (EDK preview)
domain_url: https://superset.apache.org/
description: A modern, enterprise-ready business intelligence web application.
docs: https://docs.meltano.com/guide/analysis
repo: https://github.com/apache/superset
maintenance_status: active
variant: meltano
pip_url: apache-superset==2.0.0 flask==2.0.3 werkzeug==2.0.3 jinja2==3.0.1 wtforms==2.3.3 git+https://github.com/meltano/superset-ext.git@main
settings:
- name: ui.bind_host
  label: UI Bind Host
  value: "0.0.0.0"
  description: Host used by `meltano invoke superset:ui`. Used in the `gunicorn` `--bind` option along with `ui.port`.
- name: ui.port
  label: UI Port
  value: 8088
  description: Port used by `meltano invoke superset:ui`. Used in the `gunicorn` `--bind` option along with `ui.bind_host`.
- name: ui.timeout
  label: UI Timeout
  value: 60
  description: Timeout in sections, used by `meltano invoke superset:ui`. Corresponds to the `gunicorn` `--timeout` option
- name: ui.workers
  label: UI Workers
  value: 4
  description: Workers used by `meltano invoke superset:ui`. Corresponds to the `gunicorn` `--workers` option
- name: HOME
  label: Superset home 
  value: $MELTANO_PROJECT_ROOT/.meltano/utilities/superset
- name: CONFIG_PATH
  label: Superset config path
  description: The path to where the Superset config file is located.
  value: $MELTANO_PROJECT_ROOT/analyze/superset/superset_config.py
- name: SQLALCHEMY_DATABASE_URI
  label: SQLAlchemy Database URI
  value: sqlite:///$MELTANO_PROJECT_ROOT/.meltano/utilities/superset/superset.db
  description: |
    Superset metadata database connection string. Equivalent to the `SQLALCHEMY_DATABASE_URI` setting in `superset_config.py`.

    SQLite is used by default, but in production PostgreSQL or MySQL is more appropriate. See the [Superset documentation](https://superset.apache.org/docs/installation/configuring-superset/#using-a-production-metastore) for more information. To add a database driver like `psycopg2` or `mysqlclient`, refer to the [Add additional database drivers](#add-additional-database-drivers) section above.
- name: SECRET_KEY
  label: Secret Key
  kind: password
  value: thisisnotapropersecretkey
  description: App secret key used for securely signing the session cookie and encrypting sensitive information on the database. Equivalent to the `SECRET_KEY` setting in `superset_config.py`.
executable: superset_invoker
commands:
  describe:
    executable: superset_extension
    args: describe
  initialize:
    executable: superset_extension
    args: initialize
  invoke:
    executable: superset_extension
    args: invoke
  create-admin:
    args: create-admin
    executable: superset_extension
  ui:
    executable: gunicorn
    args: --bind $SUPERSET_UI_BIND_HOST:$SUPERSET_UI_PORT --timeout $SUPERSET_UI_TIMEOUT --workers $SUPERSET_UI_WORKERS superset.app:create_app()
    description: Start the Superset UI. Will be available on the configured `ui.bind_host` and `ui.port`, which default to `http://localhost:8088`
  load-examples:
    args: load_examples
    description: Load examples.
logo_url: /assets/logos/utilities/superset.png
keywords:
- analysis
definition: |
 is a modern data exploration and visualization platform.

 ### EDK Preview
  This utility is in a preview stage of readiness. It is based upon our Extension Developer Kit (EDK) which is the new way to build and add plugins to Meltano Hub.
  This preview of Superset will replace the existing Superset utility once it comes out of preview. In the meantime, we would appreciate any feedback in the [EDK repo](https://github.com/meltano/edk/) and in the [Superset Extension repo](https://github.com/meltano/superset-ext/).
next_steps: |
  1. If you're running Superset for the first time in a new environment you'll need to initialize the config, database, as well as generate generate a new [`SECRET_KEY`](#secret-key) to increase security:

    ```sh
    # create a new secret key
    meltano config superset_ext set SECRET_KEY $(openssl rand -base64 42)
    # create the initial config, database, and auth roles.
    meltano invoke superset_ext:initialize
    ```
  2. Create an admin user: (use `admin` as username to be able to load the examples)

    ```sh
    # add a superset admin using prompting for required values
    meltano invoke superset_ext:create-admin
    ```

    This is equivalent to `superset fab create-admin` in the Superset documentation

  3. Optionally, load some example data to play with:

    ```sh
    meltano invoke superset_ext:load-examples
    ```

    This is equivalent to `superset load_examples` in the Superset documentation
    
    **Note that you need a user named `admin` with the admin permissions to load these examples.**

  4. Launch the Superset UI and log in using the username/password you created:

    ```sh
    meltano invoke superset_ext:ui
    ```

    By default, the UI will be available at at [`http://localhost:8088`](http://localhost:8088). You can change this using the `ui.bind_host` and `ui.port` settings documented below.

  #### Add additional database drivers

  Superset does not ship bundled with connectivity to databases, except for SQLite, which is part of the Python standard library. Youâ€™ll need to install the required packages for the database you want to use as your metadata database as well as the packages needed to connect to the databases you want to access through Superset.

  You can find the list of supported databases and the appropriate PyPI (pip) packages in the [Supported Databases and Dependencies](https://superset.apache.org/docs/databases/installing-database-drivers#supported-databases-and-dependencies) section in the Superset documenation. These can then be added to your Meltano project by configuring
  a custom `pip_url` for the `superset` utility:

  1. Find the `superset_ext` plugin definition in your `meltano.yml` project file
  2. Update the `pip_url` property to include the desired additional packages:

     ```yaml
     utilities:
     - name: superset
       variant: apache
       pip_url: apache-superset==2.0.0 flask==2.0.3 werkzeug==2.0.3 jinja2==3.0.1 wtforms==2.3.3 git+https://github.com/meltano/superset-ext.git@main snowflake-sqlalchemy
     ```
  3. Re-install the plugin:

     ```sh
     meltano install utility superset_ext
     ```

  Now when you (re)start Superset, you will be able to connect to a new type of database, like Snowflake in the example.
usage: |
  ## Troubleshooting
  
  ### Invalid decryption key
  
  If you see a `ValueError: Invalid decryption key` warning or a message that `Superset default roles and permissions could not be created: 'superset init' failed` then it's likely that your encryption key is incorrect. 
  
  If you change your [`SECRET_KEY`](#secret-key), the metadata database containing your users and reports will become unreadable. If there was nothing valuable in there, you can delete it at `.meltano/utilities/superset/superset.db` inside your project. If you changed the secret key because the old one was leaked, you can [rotate the key](https://superset.apache.org/docs/installation/configuring-superset/#secret_key-rotation):
  
  ```bash
  meltano config superset_ext set SECRET_KEY <new_key>
  meltano config superset_ext set PREVIOUS_SECRET_KEY <original_key>
  meltano invoke superset_ext re-encrypt-secrets
  ```
  
