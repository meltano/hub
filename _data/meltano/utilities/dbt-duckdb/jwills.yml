name: dbt-duckdb
label: dbt DuckDB (EDK preview)
domain_url: https://www.getdbt.com/
executable: dbt_invoker
namespace: dbt_duckdb
docs: https://docs.meltano.com/guide/transformation
repo: https://github.com/jwills/dbt-duckdb
ext_repo: https://github.com/meltano/dbt-ext
pip_url: dbt-core~=1.3.0 dbt-duckdb~=1.3.0 git+https://github.com/meltano/dbt-ext.git@main
variant: jwills
maintenance_status: active
settings_preamble: |
  Settings for dbt itself can be configured through [dbt_project.yml](https://docs.getdbt.com/reference/dbt_project.yml) as usual, which can be found at transform/dbt_project.yml in your Meltano project.
settings:
- name: skip_pre_invoke
  label: Skip Pre-invoke
  kind: boolean
  value: false
  description: Whether to skip pre-invoke hooks which automatically run dbt clean and deps
  env: DBT_EXT_SKIP_PRE_INVOKE
- name: type
  label: dbt Profile type
  env: DBT_EXT_TYPE
  value: duckdb
- name: project_dir
  label: Projects Directory
  value: $MELTANO_PROJECT_ROOT/transform
- name: profiles_dir
  label: Profiles Directory
  value: $MELTANO_PROJECT_ROOT/transform/profiles/duckdb
  env: DBT_PROFILES_DIR
- name: path
  label: Path
  kind: string
  description: The path on your local filesystem where you would like the DuckDB database file and it's associated write-ahead log to be written.
- name: schema
  kind: string
  label: Schema
  value: main
  description: Specify the schema to write into.
definition: |
  is an adapter-specific dbt [transformer](https://docs.meltano.com/concepts/plugins#transformers) for running SQL-based transformations on data stored in your warehouse.

  ### EDK Preview
  This utility is in a preview stage of readiness. It is based upon our Extension Developer Kit (EDK) which is the new way to build and add plugins to Meltano Hub.
  This preview of dbt will replace the native transformer once it comes out of preview. In the meantime, we would appreciate any feedback in the [EDK repo](https://github.com/meltano/edk/) and in the [dbt Extension repo](https://github.com/meltano/dbt-ext/).

commands:
  clean:
    args: clean
    description: Delete all folders in the clean-targets list (usually the dbt_modules
      and target directories.)
  compile:
    args: compile
    description: Generates executable SQL from source model, test, and analysis files.
      Compiled SQL files are written to the target/ directory.
  deps:
    args: deps
    description: Pull the most recent version of the dependencies listed in packages.yml
  run:
    args: run
    description: Compile SQL and execute against the current target database.
  seed:
    args: seed
    description: Load data from csv files into your data warehouse.
  snapshot:
    args: snapshot
    description: Execute snapshots defined in your project.
  test:
    args: test
    description: Runs tests on data in deployed models.
  freshness:
    args: source freshness
    description: Check the freshness of your source data.
  build:
    args: build
    description: Will run your models, tests, snapshots and seeds in DAG order.
  docs-generate:
    args: docs generate
    description: Generate documentation for your project.
  docs-serve:
    args: docs serve
    description: Serve documentation for your project. Make sure you ran `docs-generate` first.
  debug:
    args: debug
    description: Debug your DBT project and warehouse connection.
  describe:
    args: describe
    executable: dbt_extension
    description: Describe the 
  initialize:
    args: initialize
    executable: dbt_extension
    description: |
      Initialize a new dbt project. This will create a dbt_project.yml file, a profiles.yml file, and models directory.
logo_url: /assets/logos/utilities/dbt.png
keywords:
  - meltano_edk
next_steps: |
  1. If you're running dbt for the first time in a new environment:

    ```sh
    # create a starter dbt_project.yml file, a profiles.yml file, and models directory
    meltano invoke dbt-duckdb:initialize
    ```
