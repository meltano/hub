definition: helps data teams eliminate pipeline debt, through data testing, documentation,
  and profiling. Note that this utility is pinned to an older version since the [Great
  Expectations CLI is now deprecated](https://greatexpectations.io/blog/a-fond-farewell-to-the-cli).
domain_url: https://greatexpectations.io/
executable: great_expectations
keywords:
- quality
label: Great Expectations
logo_url: /assets/logos/utilities/great_expectations.png
maintenance_status: active
name: great_expectations
namespace: great_expectations
next_steps: |
  1. Create expectations suites and checkpoints!

  #### Add additional database drivers

  If you are using Great Expectations to validate data in a database or warehouse, you
  might need to install the appropriate drivers. Common options are supported by Great Expectations
  as pip extras, and any additional packages you may want can be added too by configuring
  a custom `pip_url` for the `great_expectations` utility:

  1. Find the `great_expectations` plugin definition in your `meltano.yml` project file
  2. Update the `pip_url` property to include the desired additional extras and packages:

     ```yaml
     utilities:
     - name: great_expectations
       variant: great-expectations
       pip_url: great_expectations[redshift] awscli
     ```
  3. Re-install the plugin:

     ```sh
     meltano install utility great_expectations
     ```

  The next time you run Great Expectations, you will be able to connect to a new type of database, like Redshift in the example.
pip_url: great_expectations==0.15.50
repo: https://github.com/great-expectations/great_expectations
requires:
  files:
  - name: files-great-expectations
    variant: meltano
settings:
- env: GE_HOME
  label: Great Expectations Home Directory
  name: ge_home
  value: $MELTANO_PROJECT_ROOT/utilities/great_expectations
variant: great-expectations
