capabilities:
- activate-version
- soft-delete
- hard-delete
- datatype-failsafe
- record-flattening
description: Amazon Redshift loader
dialect: redshift
domain_url: https://aws.amazon.com/redshift/
executable: target-redshift
keywords:
- database
label: Amazon Redshift
logo_url: /assets/logos/loaders/redshift.png
maintenance_status: active
name: target-redshift
namespace: target_redshift
pip_url: pipelinewise-target-redshift
quality: silver
repo: https://github.com/transferwise/pipelinewise-target-redshift
settings:
- description: Redshift host
  label: Host
  name: host
- description: Redshift port
  kind: integer
  label: Port
  name: port
  value: 5439
- description: Redshift database name
  label: Database Name
  name: dbname
- description: Redshift user name
  label: User name
  name: user
- description: Redshift password
  kind: password
  label: Password
  name: password
- description: AWS S3 bucket name
  label: S3 Bucket name
  name: s3_bucket
- description: |
    Note `$MELTANO_EXTRACT__LOAD_SCHEMA` [will expand to](https://docs.meltano.com/guide/configuration.html#expansion-in-setting-values) the value of the [`load_schema` extra](https://docs.meltano.com/concepts/plugins#load-schema-extra) for the extractor used in the pipeline, which defaults to the extractor's namespace, e.g. `tap_gitlab` for [`tap-gitlab`](/extractors/gitlab).

    Name of the schema where the tables will be created. If `schema_mapping`
    is not defined then every stream sent by the tap is loaded into this schema.
  label: Default Target Schema
  name: default_target_schema
  value: $MELTANO_EXTRACT__LOAD_SCHEMA
- description: AWS profile name for profile based authentication. If not provided,
    `AWS_PROFILE` environment variable will be used.
  label: AWS Profile Name
  name: aws_profile
- description: S3 Access Key Id. Used for S3 and Redshift copy operations. If not
    provided, `AWS_ACCESS_KEY_ID` environment variable will be used.
  kind: password
  label: AWS S3 Access Key ID
  name: aws_access_key_id
- description: S3 Secret Access Key. Used for S3 and Redshift copy operations. If
    not provided, `AWS_SECRET_ACCESS_KEY` environment variable will be used.
  kind: password
  label: AWS S3 Secret Access Key
  name: aws_secret_access_key
- description: S3 AWS STS token for temporary credentials. If not provided, `AWS_SESSION_TOKEN`
    environment variable will be used.
  kind: password
  label: AWS S3 Session Token
  name: aws_session_token
- description: AWS Role ARN to be used for the Redshift COPY operation. Used instead
    of the given AWS keys for the COPY operation if provided - the keys are still
    used for other S3 operations
  label: AWS Redshift COPY role ARN
  name: aws_redshift_copy_role_arn
- description: S3 Object ACL
  label: AWS S3 ACL
  name: s3_acl
- description: A static prefix before the generated S3 key names. Using prefixes you
    can upload files into specific directories in the S3 bucket. Default(None)
  label: S3 Key Prefix
  name: s3_key_prefix
- description: |
    Parameters to use in the COPY command when loading data to Redshift.

    Some basic file formatting parameters are fixed values and not recommended overriding them by custom values.
    They are like: `CSV GZIP DELIMITER ',' REMOVEQUOTES ESCAPE`.
  label: COPY options
  name: copy_options
  value: EMPTYASNULL BLANKSASNULL TRIMBLANKS TRUNCATECOLUMNS TIMEFORMAT 'auto' COMPUPDATE
    OFF STATUPDATE OFF
- description: Maximum number of rows in each batch. At the end of each batch, the
    rows in the batch are loaded into Redshift.
  kind: integer
  label: Batch Size Rows
  name: batch_size_rows
  value: 100000
- description: Flush and load every stream into Redshift when one batch is full. Warning
    - This may trigger the COPY command to use files with low number of records, and
    may cause performance problems.
  kind: boolean
  label: Flush All Streams
  name: flush_all_streams
  value: false
- description: The number of threads used to flush tables. 0 will create a thread
    for each stream, up to parallelism_max. -1 will create a thread for each CPU core.
    Any other positive number will create that number of threads, up to parallelism_max.
  kind: integer
  label: Parallelism
  name: parallelism
  value: 0
- description: Max number of parallel threads to use when flushing tables.
  kind: integer
  label: Max Parallelism
  name: max_parallelism
  value: 16
- description: Grant USAGE privilege on newly created schemas and grant SELECT privilege
    on newly created tables to a specific list of users or groups. If `schema_mapping`
    is not defined then every stream sent by the tap is granted accordingly.
  label: Default Target Schema Select Permission
  name: default_target_schema_select_permissions
- description: |
    Useful if you want to load multiple streams from one tap to multiple
    Redshift schemas.

    If the tap sends the `stream_id` in `<schema_name>-<table_name>`
    format then this option overwrites the `default_target_schema` value.

    Note, that using `schema_mapping` you can overwrite the `default_target_schema_select_permissions`
    value to grant SELECT permissions to different groups per schemas or optionally
    you can create indices automatically for the replicated tables.
  kind: object
  label: Scema Mapping
  name: schema_mapping
- description: By default the connector caches the available table structures in Redshift
    at startup. In this way it doesn't need to run additional queries when ingesting
    data to check if altering the target tables is required. With `disable_table_cache`
    option you can turn off this caching. You will always see the most recent table
    structures but will cause an extra query runtime.
  kind: boolean
  label: Disable Table Cache
  name: disable_table_cache
  value: false
- description: |
    Metadata columns add extra row level information about data ingestions,
    (i.e. when was the row read in source, when was inserted or deleted in redshift
    etc.) Metadata columns are creating automatically by adding extra columns to the
    tables with a column prefix `_SDC_`.

    The metadata columns are documented at https://transferwise.github.io/pipelinewise/data_structure/sdc-columns.html.
    Enabling metadata columns will flag the deleted rows by setting the _SDC_DELETED_AT
    metadata column.

    Without the `add_metadata_columns` option the deleted rows from
    singer taps will not be recongisable in Redshift.
  kind: boolean
  label: Add Metdata Columns
  name: add_metadata_columns
  value: false
- description: When `hard_delete` option is true then DELETE SQL commands will be
    performed in Redshift to delete rows in tables. It's achieved by continuously
    checking the `_SDC_DELETED_AT` metadata column sent by the singer tap. Due to
    deleting rows requires metadata columns, `hard_delete` option automatically enables
    the `add_metadata_columns` option as well.
  kind: boolean
  label: Hard Delete
  name: hard_delete
  value: false
- description: Object type `RECORD` items from taps can be loaded into VARIANT columns
    as JSON (default) or we can flatten the schema by creating columns automatically.
    When value is 0 (default) then flattening functionality is turned off.
  kind: integer
  label: Data Flattening Max Level
  name: data_flattening_max_level
  value: 0
- description: Log based and Incremental replications on tables with no Primary Key
    cause duplicates when merging UPDATE events. When set to true, stop loading data
    if no Primary Key is defined.
  kind: boolean
  label: Primary Key Required
  name: primary_key_required
  value: true
- description: Validate every single record message to the corresponding JSON schema.
    This option is disabled by default and invalid `RECORD` messages will fail only
    at load time by Redshift. Enabling this option will detect invalid records earlier
    but could cause performance degradation.
  kind: boolean
  label: Validate Records
  name: validate_records
  value: false
- description: Do not update existing records when Primary Key is defined. Useful
    to improve performance when records are immutable, e.g. events
  kind: boolean
  label: Skip Updates
  name: skip_updates
  value: false
- description: The compression method to use when writing files to S3 and running
    Redshift COPY.
  kind: options
  label: Compression
  name: compression
  options:
  - label: gzip
    value: gzip
  - label: bzip2
    value: bzip2
  - label: None
    value: ''
- description: The number of slices to split files into prior to running COPY on Redshift.
    This should be set to the number of Redshift slices. The number of slices per
    node depends on the node size of the cluster - run SELECT COUNT(DISTINCT slice)
    slices FROM stv_slices to calculate this. Defaults to 1.
  kind: integer
  label: Slices
  name: slices
  value: 1
- description: '(Default: platform-dependent) Directory of temporary CSV files with
    RECORD messages.'
  label: Temp Directory
  name: temp_dir
settings_group_validation:
- - host
  - port
  - user
  - password
  - dbname
  - s3_bucket
  - default_target_schema
  - aws_profile
- - host
  - port
  - user
  - password
  - dbname
  - s3_bucket
  - default_target_schema
  - aws_access_key_id
  - aws_secret_access_key
- - host
  - port
  - user
  - password
  - dbname
  - s3_bucket
  - default_target_schema
  - aws_session_token
target_schema: $TARGET_REDSHIFT_DEFAULT_TARGET_SCHEMA
variant: transferwise
