name: target-postgres
label: PostgreSQL
description: PostgreSQL database loader
namespace: target_postgres
dialect: postgres
target_schema: $TARGET_POSTGRES_SCHEMA
logo_url: /assets/logos/loaders/postgres.png
variant: transferwise
docs: https://hub.meltano.com/loaders/postgres.html
repo: https://github.com/transferwise/pipelinewise-target-postgres
pip_url: pipelinewise-target-postgres
settings_group_validation:
- - host
  - port
  - user
  - password
  - dbname
  - default_target_schema
settings:
- name: host
  env_aliases:
  - PG_ADDRESS
  value: localhost
  description: PostgreSQL host
  label: Host
- name: port
  env_aliases:
  - PG_PORT
  kind: integer
  value: 5432
  description: PostgreSQL port
  label: Port
- name: user
  env_aliases:
  - PG_USERNAME
  description: PostgreSQL user
  label: User
- name: password
  env_aliases:
  - PG_PASSWORD
  kind: password
  description: PostgreSQL password
  label: Password
- name: dbname
  env_aliases:
  - PG_DATABASE
  description: PostgreSQL database name
  label: Database Name
- name: ssl
  kind: boolean
  value: false
  value_post_processor: stringify
  label: SSL
- name: default_target_schema
  env_aliases:
  - TARGET_POSTGRES_SCHEMA
  - PG_SCHEMA
  value: $MELTANO_EXTRACT__LOAD_SCHEMA
  description: Name of the schema where the tables will be created. If `schema_mapping`
    is not defined then every stream sent by the tap is loaded into this schema.
  label: Default Target Schema
- name: batch_size_rows
  kind: integer
  value: 100000
  description: Maximum number of rows in each batch. At the end of each batch, the
    rows in the batch are loaded into Postgres.
  label: Batch Size Rows
- name: flush_all_streams
  kind: boolean
  value: false
  description: 'Flush and load every stream into Postgres when one batch is full.
    Warning: This may trigger the COPY command to use files with low number of records.'
  label: Flush All Streams
- name: parallelism
  kind: integer
  value: 0
  description: The number of threads used to flush tables. 0 will create a thread
    for each stream, up to parallelism_max. -1 will create a thread for each CPU core.
    Any other positive number will create that number of threads, up to parallelism_max.
  label: Parallelism
- name: parallelism_max
  kind: integer
  value: 16
  description: Max number of parallel threads to use when flushing tables.
  label: Max Parallelism
- name: default_target_schema_select_permission
  description: Grant USAGE privilege on newly created schemas and grant SELECT privilege
    on newly created tables to a specific role or a list of roles. If `schema_mapping`
    is not defined then every stream sent by the tap is granted accordingly.
  label: Default Target Schema Select Permission
- name: schema_mapping
  kind: object
  description: "Useful if you want to load multiple streams from one tap to multiple\
    \ Postgres schemas.\nIf the tap sends the `stream_id` in `<schema_name>-<table_name>`\
    \ format then this option overwrites the `default_target_schema` value. Note,\
    \ that using `schema_mapping` you can overwrite the `default_target_schema_select_permission`\
    \ value to grant SELECT permissions to different groups per schemas or optionally\
    \ you can create indices automatically for the replicated tables.\n"
  label: Schema Mapping
- name: add_metadata_columns
  kind: boolean
  value: false
  description: Metadata columns add extra row level information about data ingestions,
    (i.e. when was the row read in source, when was inserted or deleted in postgres
    etc.) Metadata columns are creating automatically by adding extra columns to the
    tables with a column prefix `_SDC_`. The column names are following the stitch
    naming conventions documented at https://www.stitchdata.com/docs/data-structure/integration-schemas#sdc-columns.
    Enabling metadata columns will flag the deleted rows by setting the `_SDC_DELETED_AT`
    metadata column. Without the `add_metadata_columns` option the deleted rows from
    singer taps will not be recongisable in Postgres.
  label: Add Metadata Columns
- name: hard_delete
  kind: boolean
  value: false
  description: When `hard_delete` option is true then DELETE SQL commands will be
    performed in Postgres to delete rows in tables. It's achieved by continuously
    checking the `_SDC_DELETED_AT` metadata column sent by the singer tap. Due to
    deleting rows requires metadata columns, `hard_delete` option automatically enables
    the `add_metadata_columns` option as well.
  label: Hard Delete
- name: data_flattening_max_level
  kind: integer
  value: 0
  description: Object type RECORD items from taps can be transformed to flattened
    columns by creating columns automatically. When value is 0 (default) then flattening
    functionality is turned off.
  label: Data Flattening Max Level
- name: primary_key_required
  kind: boolean
  value: true
  description: Log based and Incremental replications on tables with no Primary Key
    cause duplicates when merging UPDATE events. When set to true, stop loading data
    if no Primary Key is defined.
  label: Primary Key Required
- name: validate_records
  kind: boolean
  value: false
  description: Validate every single record message to the corresponding JSON schema.
    This option is disabled by default and invalid RECORD messages will fail only
    at load time by Postgres. Enabling this option will detect invalid records earlier
    but could cause performance degradation.
  label: Validate Records
- name: temp_dir
  description: '(Default: platform-dependent) Directory of temporary CSV files with
    RECORD messages.'
  label: Temporary Directory
domain_url: https://www.postgresql.org/
maintenance_status: active
keywords:
- database
