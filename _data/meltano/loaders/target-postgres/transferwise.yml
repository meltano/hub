description: PostgreSQL database loader
dialect: postgres
domain_url: https://www.postgresql.org/
keywords:
- database
label: PostgreSQL
logo_url: /assets/logos/loaders/postgres.png
maintenance_status: active
name: target-postgres
namespace: target_postgres
pip_url: pipelinewise-target-postgres
repo: https://github.com/transferwise/pipelinewise-target-postgres
settings:
- description: PostgreSQL host
  label: Host
  name: host
  value: localhost
- description: PostgreSQL port
  kind: integer
  label: Port
  name: port
  value: 5432
- description: PostgreSQL user
  label: User
  name: user
- description: PostgreSQL password
  kind: password
  label: Password
  name: password
- description: PostgreSQL database name
  label: Database Name
  name: dbname
- description: |
    Using SSL via postgres `sslmode='require'` option.

    If the server does not accept SSL connections or the client certificate is not recognized the connection will fail.
  kind: boolean
  label: SSL
  name: ssl
  value: false
  value_post_processor: stringify
- aliases:
  - schema
  description: |
    Note that `$MELTANO_EXTRACT__LOAD_SCHEMA` [will expand to](https://docs.meltano.com/guide/configuration.html#expansion-in-setting-values) the value of the [`load_schema` extra](https://docs.meltano.com/concepts/plugins#load-schema-extra) for the extractor used in the pipeline, which defaults to the extractor's namespace, e.g. `tap_gitlab` for [`tap-gitlab`](/extractors/gitlab).

    Name of the schema where the tables will be created. If `schema_mapping`
    is not defined then every stream sent by the tap is loaded into this schema.
  label: Default Target Schema
  name: default_target_schema
  value: $MELTANO_EXTRACT__LOAD_SCHEMA
- description: Maximum number of rows in each batch. At the end of each batch, the
    rows in the batch are loaded into Postgres.
  kind: integer
  label: Batch Size Rows
  name: batch_size_rows
  value: 100000
- description: 'Flush and load every stream into Postgres when one batch is full.
    Warning: This may trigger the COPY command to use files with low number of records.'
  kind: boolean
  label: Flush All Streams
  name: flush_all_streams
  value: false
- description: The number of threads used to flush tables. 0 will create a thread
    for each stream, up to parallelism_max. -1 will create a thread for each CPU core.
    Any other positive number will create that number of threads, up to parallelism_max.
  kind: integer
  label: Parallelism
  name: parallelism
  value: 0
- description: Max number of parallel threads to use when flushing tables.
  kind: integer
  label: Max Parallelism
  name: parallelism_max
  value: 16
- description: Grant USAGE privilege on newly created schemas and grant SELECT privilege
    on newly created tables to a specific role or a list of roles. If `schema_mapping`
    is not defined then every stream sent by the tap is granted accordingly.
  label: Default Target Schema Select Permission
  name: default_target_schema_select_permission
- description: |
    Useful if you want to load multiple streams from one tap to multiple
    Postgres schemas.

    If the tap sends the `stream_id` in `<schema_name>-<table_name>`
    format then this option overwrites the `default_target_schema` value. Note,
    that using `schema_mapping` you can overwrite the `default_target_schema_select_permission`
    value to grant SELECT permissions to different groups per schemas or optionally
    you can create indices automatically for the replicated tables.


    Example structure (as YAML):


    ```yaml
    schema_mapping:
      my_tap_stream_id:
        target_schema: my_postgres_schema
        target_schema_select_permissions: [ "role_with_select_privs" ]
        indices: ["column_1", "column_2s"]
    ```
  kind: object
  label: Schema Mapping
  name: schema_mapping
- description: |
    Useful if you want to load multiple streams from one tap to multiple Postgres schemas.

    If the tap sends the `stream_id` in `<schema_name>-<table_name>` format then this option overwrites the `default_target_schema` value.

    Note, that using `schema_mapping` you can overwrite the `default_target_schema_select_permission` value to grant SELECT permissions to different groups per schemas or optionally you can create indices automatically for the replicated tables.

    This setting can hold an object mapping source schema names to objects with `target_schema` and (optionally) `target_schema_select_permissions` and `indices` keys.
  kind: boolean
  label: Add Metadata Columns
  name: add_metadata_columns
  value: false
- description: When `hard_delete` option is true then DELETE SQL commands will be
    performed in Postgres to delete rows in tables. It's achieved by continuously
    checking the `_SDC_DELETED_AT` metadata column sent by the singer tap. Due to
    deleting rows requires metadata columns, `hard_delete` option automatically enables
    the `add_metadata_columns` option as well.
  kind: boolean
  label: Hard Delete
  name: hard_delete
  value: false
- description: Object type `RECORD`` items from taps can be transformed to flattened
    columns by creating columns automatically. When value is 0 (default) then flattening
    functionality is turned off.
  kind: integer
  label: Data Flattening Max Level
  name: data_flattening_max_level
  value: 0
- description: Log based and Incremental replications on tables with no Primary Key
    cause duplicates when merging UPDATE events. When set to true, stop loading data
    if no Primary Key is defined.
  kind: boolean
  label: Primary Key Required
  name: primary_key_required
  value: true
- description: Validate every single record message to the corresponding JSON schema.
    This option is disabled by default and invalid RECORD messages will fail only
    at load time by Postgres. Enabling this option will detect invalid records earlier
    but could cause performance degradation.
  kind: boolean
  label: Validate Records
  name: validate_records
  value: false
- description: '(Default: platform-dependent) Directory of temporary CSV files with
    RECORD messages.'
  label: Temporary Directory
  name: temp_dir
settings_group_validation:
- - host
  - port
  - user
  - password
  - dbname
  - default_target_schema
target_schema: $TARGET_POSTGRES_DEFAULT_TARGET_SCHEMA
usage: |
  ## Troubleshooting

  ### `ld`, `clang`, `lssl`, or `linker` Errors

  If you have an error message like:

    * `ld: library not found for -lssl`
    * `clang: error: linker command failed with exit code 1`
    * `error: command 'clang' failed with exit status 1`

  These error messages indicates that there is a problem installing OpenSSL.

  This [Stack Overflow answer](https://stackoverflow.com/questions/26288042/error-installing-psycopg2-library-not-found-for-lssl)
  has specific recommendations on setting the `LDFLAGS` and/or `CPPFLAGS` environment variables.
  Set those prior to running `meltano add loader target-postgres`.
variant: transferwise
