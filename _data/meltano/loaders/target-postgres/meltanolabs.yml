capabilities:
- about
- schema-flattening
- stream-maps
description: PostgreSQL database loader
dialect: postgres
domain_url: https://www.postgresql.org/
executable: target-postgres
keywords:
- meltano_sdk
- database
label: Postgres
logo_url: /assets/logos/loaders/postgres.png
maintenance_status: active
name: target-postgres
namespace: target_postgres
next_steps: ''
pip_url: meltanolabs-target-postgres
quality: gold
repo: https://github.com/MeltanoLabs/target-postgres
settings:
- description: Note that this must be enabled for activate_version to work!This adds
    _sdc_extracted_at, _sdc_batched_at, and more to every table. See https://sdk.meltano.com/en/latest/implementation/record_metadata.html
    for more information.
  kind: boolean
  label: Add Record Metadata
  name: add_record_metadata
  value: true
- description: Database name. Note if sqlalchemy_url is set this will be ignored.
  kind: string
  label: Database
  name: database
- description: 'Postgres schema to send data to, example: tap-clickup'
  kind: string
  label: Default Target Schema
  name: default_target_schema
  value: $MELTANO_EXTRACT__LOAD_SCHEMA
- description: Dialect+driver see https://docs.sqlalchemy.org/en/20/core/engines.html.
    Generally just leave this alone. Note if sqlalchemy_url is set this will be ignored.
  kind: string
  label: Dialect+Driver
  name: dialect+driver
  value: postgresql+psycopg2
- description: "'True' to enable schema flattening and automatically expand nested
    properties."
  kind: boolean
  label: Flattening Enabled
  name: flattening_enabled
- description: The max depth to flatten schemas.
  kind: integer
  label: Flattening Max Depth
  name: flattening_max_depth
- description: When activate version is sent from a tap this specefies if we should
    delete the records that don't match, or mark them with a date in the `_sdc_deleted_at`
    column.
  kind: boolean
  label: Hard Delete
  name: hard_delete
  value: false
- description: Hostname for postgres instance. Note if sqlalchemy_url is set this
    will be ignored.
  kind: string
  label: Host
  name: host
- description: The method to use when loading data into the destination. `append-only`
    will always write all input records whether that records already exists or not.
    `upsert` will update existing records and insert new records. `overwrite` will
    delete all existing records and insert all input records.
  kind: options
  label: Load Method
  name: load_method
  options:
  - label: Append Only
    value: append-only
  - label: Upsert
    value: upsert
  - label: Overwrite
    value: overwrite
  value: append-only
- description: Password used to authenticate. Note if sqlalchemy_url is set this will
    be ignored.
  kind: password
  label: Password
  name: password
- description: The port on which postgres is awaiting connection. Note if sqlalchemy_url
    is set this will be ignored.
  kind: integer
  label: Port
  name: port
  value: 5432
- description: SQLAlchemy connection string. This will override using host, user,
    password, port, dialect, and all ssl settings. Note that you must escape password
    special characters properly. See 
    https://docs.sqlalchemy.org/en/20/core/engines.html#escaping-special-characters-such-as-signs-in-passwords
  kind: string
  label: Sqlalchemy URL
  name: sqlalchemy_url
- description: Enable an ssh tunnel (also known as bastion host), see the other ssh_tunnel.*
    properties for more details
  kind: boolean
  label: SSH Tunnel Enable
  name: ssh_tunnel.enable
  value: false
- description: Host of the bastion host, this is the host we'll connect to via ssh
  kind: string
  label: SSH Tunnel Host
  name: ssh_tunnel.host
- description: Port to connect to bastion host
  kind: integer
  label: SSH Tunnel Port
  name: ssh_tunnel.port
  value: 22
- description: Private Key for authentication to the bastion host
  kind: password
  label: SSH Tunnel Private Key
  name: ssh_tunnel.private_key
- description: Private Key Password, leave None if no password is set
  kind: password
  label: SSH Tunnel Private Key Password
  name: ssh_tunnel.private_key_password
- description: Username to connect to bastion host
  kind: string
  label: SSH Tunnel Username
  name: ssh_tunnel.username
- description: The certificate authority that should be used to verify the server's
    identity. Can be provided either as the certificate itself (in .env) or as a filepath
    to the certificate. Note if sqlalchemy_url is set this will be ignored.
  kind: string
  label: SSL Certificate Authority
  name: ssl_certificate_authority
  value: ~/.postgresql/root.crl
- description: The certificate that should be used to verify your identity to the
    server. Can be provided either as the certificate itself (in .env) or as a filepath
    to the certificate. Note if sqlalchemy_url is set this will be ignored.
  kind: string
  label: SSL Client Certificate
  name: ssl_client_certificate
  value: ~/.postgresql/postgresql.crt
- description: Whether or not to provide client-side certificates as a method of authentication
    to the server. Use ssl_client_certificate and ssl_client_private_key for further
    customization. To use SSL to verify the server's identity, use ssl_enable instead.
    Note if sqlalchemy_url is set this will be ignored.
  kind: boolean
  label: SSL Client Certificate Enable
  name: ssl_client_certificate_enable
  value: false
- description: The private key for the certificate you provided. Can be provided either
    as the certificate itself (in .env) or as a filepath to the certificate. Note
    if sqlalchemy_url is set this will be ignored.
  kind: password
  label: SSL Client Private Key
  name: ssl_client_private_key
  value: ~/.postgresql/postgresql.key
- description: Whether or not to use ssl to verify the server's identity. Use ssl_certificate_authority
    and ssl_mode for further customization. To use a client certificate to authenticate
    yourself to the server, use ssl_client_certificate_enable instead. Note if sqlalchemy_url
    is set this will be ignored.
  kind: boolean
  label: SSL Enable
  name: ssl_enable
  value: false
- description: SSL Protection method, see [postgres 
    documentation](https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-PROTECTION)
    for more information. Must be one of disable, allow, prefer, require, verify-ca,
    or verify-full. Note if sqlalchemy_url is set this will be ignored.
  kind: string
  label: SSL Mode
  name: ssl_mode
  value: verify-full
- description: The folder in which to store SSL certificates provided as raw values.
    When a certificate/key is provided as a raw value instead of as a filepath, it
    must be written to a file before it can be used. This configuration option determines
    where that file is created.
  kind: string
  label: SSL Storage Directory
  name: ssl_storage_directory
  value: .secrets
- description: User-defined config values to be used within map expressions.
  kind: object
  label: Stream Map Config
  name: stream_map_config
- description: Config object for stream maps capability. For more information check
    out [Stream Maps](https://sdk.meltano.com/en/latest/stream_maps.html).
  kind: object
  label: Stream Maps
  name: stream_maps
- description: User name used to authenticate. Note if sqlalchemy_url is set this
    will be ignored.
  kind: string
  label: User
  name: user
settings_group_validation:
- []
settings_preamble: ''
target_schema: $TARGET_POSTGRES_SCHEMA
usage: ''
variant: meltanolabs
