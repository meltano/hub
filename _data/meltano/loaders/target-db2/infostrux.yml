name: target-db2
description: Target for IBM Db2 database
domain_url: https://www.ibm.com/db2
executable: target-db2
keywords:
- meltano_sdk
- ibm_db2
logo_url: /assets/logos/loaders/db2.png
maintenance_status: active
namespace: target_db2
next_steps: ''
pip_url: target-db2
repo: https://github.com/Infostrux-Solutions/target-db2
quality: gold
supported_python_versions:
  - "3.8"
  - "3.9"
  - "3.10"
  - "3.11"
  - "3.12"
capabilities:
  - about
  - stream-maps
  - schema-flattening
  - validate-records
settings:
  type: object
  properties:
    host:
      type:
        - string
      description: IBM Db2 Database Host
    port:
      type:
        - integer
      description: IBM Db2 Database Port
    user:
      type:
        - string
      description: IBM Db2 Database User Name
    password:
      type:
        - string
      description: IBM Db2 Database User Password
      secret: true
      writeOnly: true
    database:
      type:
        - string
      description: IBM Db2 Database Name
    varchar_size:
      type:
        - integer
        - "null"
      description: |-
        Field size for Varchar type. Default 10000.
        Since JSON values are serialized to varchar,
        it may be necessary to increase this value.
        Max possible value 32764
    add_record_metadata:
      type:
        - boolean
        - "null"
      description: Add metadata to records.
    load_method:
      type:
        - string
        - "null"
      default: append-only
      description: The method to use when loading data into the destination. `append-only` will always write all input records whether that records already exists or not. `upsert` will update existing records and insert new records. `overwrite` will delete all existing records and insert all input records.
      enum:
        - append-only
        - upsert
        - overwrite
    batch_size_rows:
      type:
        - integer
        - "null"
      description: Maximum number of rows in each batch.
    validate_records:
      type:
        - boolean
        - "null"
      default: true
      description: Whether to validate the schema of the incoming streams.
    stream_maps:
      type:
        - object
        - "null"
      properties: {}
      description: Config object for stream maps capability. For more information check out [Stream Maps](https://sdk.meltano.com/en/latest/stream_maps.html).
    stream_map_config:
      type:
        - object
        - "null"
      properties: {}
      description: User-defined config values to be used within map expressions.
    faker_config:
      type:
        - object
        - "null"
      properties:
        seed:
          oneOf:
            - type:
                - number
            - type:
                - string
            - type:
                - boolean
            - type: "null"
          description: 'Value to seed the Faker generator for deterministic output: https://faker.readthedocs.io/en/master/#seeding-the-generator'
        locale:
          oneOf:
            - type:
                - string
            - type: array
              items:
                type:
                  - string
            - type: "null"
          description: 'One or more LCID locale strings to produce localized output for: https://faker.readthedocs.io/en/master/#localization'
      description: Config for the [`Faker`](https://faker.readthedocs.io/en/master/) instance variable `fake` used within map expressions. Only applicable if the plugin specifies `faker` as an addtional dependency (through the `singer-sdk` `faker` extra or directly).
    flattening_enabled:
      type:
        - boolean
        - "null"
      description: '''True'' to enable schema flattening and automatically expand nested properties.'
    flattening_max_depth:
      type:
        - integer
        - "null"
      description: The max depth to flatten schemas.
  required:
    - host
    - port
    - user
    - password
    - database
settings_group_validation:
  - []
settings_preamble: ''
usage: ''
variant: infostrux